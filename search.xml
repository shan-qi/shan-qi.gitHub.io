<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[iOS atomic与nonatomic，assign,copy与retain的定义和区别]]></title>
    <url>%2F2018%2F07%2F20%2F%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[反射机制1.获取类信息​ 首先知道，我们知道NSArray等集合对象中不限制锁存储的对象类型，只要他是一个NSObject就行。但有时候我们想知道我们放进去到底是什么类型？​ ​ 我们可以发送class消息： 12345id class = [[array objectAtIndex:0]class];id类型(即对象)其实是一个objc_object结构:typedef struct objc_object &#123; Class isa;&#125; ∗id; ​ NSObject 的 class 方法实际是上返回了这个结构中的 isa 成员。isa 指向了一个 Class 对象， 因此除了发送 class 消息外，我们也可以使用 isa 成员来访问 Class 对象。Class 对象指向了该 对象所属的类(即”类对象”)，Objective-C 把类也看成是对象，以贯彻“万物皆对象”的原则)。 Class 对象实际上是一个 objc_class 结构: 123456typedef struct objc_class ∗Class; struct objc_class &#123; Class isa; Class super_class; /∗ followed by runtime specific details... ∗/&#125;; ​ ==注意这个结构很象是 objc_object，但多了一个指向父类的 super_class 成员。也就是说，对象跟类的区别仅在于，对象中不保存继承关系，而类(或“类对象”)保存了继承关系。因此我们是通过类而不是对象来追溯类的“父类”、“祖父类”等。:== ​ 有时候需要比较一个对象是否属于某个类，可以使用类似的代码: 123if (obj-&gt;isa ==[NSString class])&#123; ...&#125; ​ 而 super_class 成员指向了父类对象，通过它我们可以访问父类的信息。 ​ 如果向一个对象发送 class 方法，我们可以得到“类对象”，而如果再向“类对象”发送class 消息，则返回的就是“元类”(meta class)。每个类只能有一个元类，其包含了类方法列表。而类对象不同，它包含了对象的方法列表。 2.选择器​ 选择器实际上是一个方法名称，用@selector 关键字来指定一个选择器，选择器用于查询对象的某个方法。 ​ 通过 NSObject 的 responseToSelector 方法，我们可以动态地查询某个对象是否存在指定的 方法。该方法需要指定一个选择器参数: 1234if([object responseToSelector:@selector(setResponse:)])&#123; ...&#125;如果 object 对象能够响应 setResponse:方法，则返回 YES，否则返回 NO。 ​ 如果确定某对象能响应指定方法，则可以通过 performSelector:方法进行调用: 1[anObject performSelector:@selector(method)]; ​ 如果该方法带有参数，则使用 performSelector: withObject:方法传递参数: 1[anObject performSelector:@selecor(method) withObject:obj]; ​ 除了向对象发送 performSelector 消息之外，Objective-C 还提供了 objc_msgSend 函数，你可以用它向任何对象发送一条消息: 12345objc_msgSend( anObject,@selector(method),obj);要使用 objc_msgSend 函数，需要导入&lt;objc/message.h&gt;头文件，其完整定义如下:id objc_msgSend(id theReceiver, SEL theSelector, ...)函数的第1个参数指向消息的接收者(即该方法的对象)，第2个参数是一个选择器(即 方法)，第3个参数是一个可变参数，是该方法的1个或多个参数，如果该方法没有参数，用 一个nil代替。方法的返回值通过函数的返回值返回。 3.类的动态创建​ 要在代码中创建类，而不是通过静态的.h 和.m 文件定义类，可以使用 Object C 运行时库API(需要#include &lt;objc/runtime.h&gt;): 1Class newClz=objc_allocreateClassPair([NSError class], &quot;RuntimeErrorSubclass&quot;, 0); class_addMethod(newClz, @selector(report), (IMP)ReportFunction, &quot;v@:&quot;); objc_registerClassPair(newClz); ​ 首先，使用 objc_allocateClassPair 动态函数创建了一个类，并在参数中指明该类的父类和 类名。用 class_addMethod 函数为该类增加了一个方法 report，这个方法是由函数 ReportFunction 实现的，由于该函数至少应包含两个参数 self 和_cmd，因此定义了该方法有 3 个参数，类型 分别为 v、@、:(一个返回值，self，_cmd)。 v 代表 void，指定了方法的返回值;@代表了 id 类型(对象)，指定了方法的固定参数 self;: 表示选择器类型(SEL)，指定了固定参数_cmd。因此函数 ReportFunction 应当实现为: 123void ReportFunction(id self, SEL _cmd) &#123;// 实现代码&#125; 12345最后，新类被注册为类对(Class Pair)。类对注册后，即可在代码中这样使用类 newClz:id obj = [[newClz alloc] init];[obj performSelector:@selector(report)];[obj release]; 4.类的动态加载Cocoa 的 Foundation 框架提供的 NSClassFromString 函数类似于 Java 的 Class.forName()方法: 12345Class clz = NSClassFromString(@&quot;MyClass&quot;);返回对象为&quot;类对象&quot;Class。通过这种方法，我们从字符串构建类实例就不再是什么问题: id obj=[[clz alloc]init]或者id obj=[[NSClassFromString(@&quot;MyClass&quot;) alloc]init];//不需要#import &quot;MyClass&quot;。 5.方法的动态调用​ 通过@selector 关键字我们已经可以在一定程度上实现方法的动态调用。然而更动态的方式是通过 Fundation 框架的 NSSelectorFromString 函数，它可以直接从字符串获得一个选择器: 1234SEL sel = NSSelectorFromString(@&quot;doSomethingMethod:&quot;);if([object respondsToSelector:sel]) &#123; [object performSelector:sel withObject:color]; &#125;]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>反射机制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS atomic与nonatomic，assign,copy与retain的定义和区别]]></title>
    <url>%2F2018%2F07%2F18%2FiOS%20%20atomic%E4%B8%8Enonatomic%EF%BC%8Cassign%2Ccopy%E4%B8%8Eretain%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 iOS atomic与nonatomic，assign,copy与retain的定义和区别注:atomic和nonatomic用来决定编译器生成的getter和setter是否为原子操作。 1. atomic ​ 设置成员变量的@property属性时，默认为atomic，提供多线程安全。 ​ 在多线程环境下，原子操作是必要的，否则有可能引起错误的结果。加了atomic，setter函数会变成下面这样： 123456 &#123;lock&#125;if (property != newValue) &#123; [property release]; property = [newValue retain]; &#125; &#123;unlock&#125; 2. nonatomic ​ 非原子的，意思是对属性进行存取操作时线程是不安全的，如果再多线程环境下，该属性很可能是不同步的，一个线程读取属性时，另一个属性却修改了属性值，这样两个线程对同规格属性进行操作的情况下，属性的值是不一致的。我们在属性中使用nonatomic的原因是，该属性不会在多线程环境下使用，使用非原子特性能得到较好的性能。 3. assign ​ 对基础数据类型 （NSInteger，CGFloat）和C数据类型（int, float, double, char）等等。 4. retain ​ 对其他NSObject和其子类对参数进行release旧值，再retain新值 ​ 指定retain会在赋值时唤醒传入值的retain消息。此属性只能用于Objective-C对象类型，而不能用于Core Foundation对象。(原因很明显，retain会增加对象的引用计数，而基本数据类型或者Core Foundation对象都没有引用计数)。 ​ ==注意:把对象添加到数组中时，引用计数将增加对象的引用次数+1。== 5. copy ​ 对NSString 它指出，在赋值时使用传入值的一份拷贝 copy与retain： ​ 注意:Copy其实是建立了一个相同的对象，而retain不是 ​ copy: ​ copy一个对象时，地址改变，内容不变 ​ retain: ​ 新的对象retain为1 ，旧有对象没有变化retain 到另外一个NSString 之后，地址相同（建立一个指针，指针拷贝），内容当然相同，这个对象的retain值+1。 ​ ==总结：retain 是指针拷贝，copy 是内容拷贝。== assign与retain： ​ 1. 接触过C，那么假设你用malloc分配了一块内存，并且把它的地址赋值给了指针a，后来你希望指针b也共享这块内存，于是你又把a赋值给（assign）了b。此时a和b指向同一块内存，请问当a不再需要这块内存，能否直接释放它？答案是否定的，因为a并不知道b是否还在使用这块内存，如果a释放了，那么b在使用这块内存的时候会引起程序crash掉。 ​ 2.了解到1中assign的问题，那么如何解决？最简单的一个方法就是使用引用计数（reference counting），还是上面的那个例子，我们给那块内存设一个引用计数，当内存被分配并且赋值给a时，引用计数是1。当把a赋值给b时引用计数增加到2。这时如果a不再使用这块内存，它只需要把引用计数减1，表明自己不再拥有这块内存。b不再使用这块内存时也把引用计数减1。当引用计数变为0的时候，代表该内存不再被任何指针所引用，系统可以把它直接释放掉。 ​ 总结：上面两点其实就是assign和retain的区别，assign就是直接赋值，属性在赋值后不会被持有，这样导致的后果就是刚对一个属性赋值后在访问就变成空值了，从而可能引起1中的问题，当数据为int, float等原生类型时，可以使用assign。使用retain操作做使得属性在赋值后一直到对象被销毁之前始终可用，就如2中所述，使用了引用计数，retain引起引用计数加1, releas起引用计数减1，当引用计数为0时，dealloc函数被调用，内存被回收。 ​]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>引用计数</tag>
        <tag>内存回收</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven部署服务器出现的问题]]></title>
    <url>%2F2018%2F07%2F18%2F%E5%B0%86maven%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[将maven部署windows出现的问题1.配置jdk的环境变量： ​ 1.新建一个名字为JAVA_HOME的环境变量(变量值为Java的安装路径)​ 2.设置path值，添加(%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin)​ 3.新建一个名为classpath的环境变量,添加(.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar)​ 4.测试是否配置成功输入java、javac、java -version(之间有空格)​ ==注意:输入echo %JAVA_HOME% 来查看当前的javahome路径。== 2.配置tomcat的环境变量​ 1.CATALINA_BASE：【安装tomcat的路径】 ​ 2.CATALINA_HOME：【同上，安装tomcat的路径】 ​ ==总结:安装tomcat的完整配置环境== ​ JAVA_HOME：所处jdk的路径 ​ Classpath：.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar ​ JRE_HOME：所处jre的路径 ​ CATALINA_BASE：安装tomcat的路径 ​ CATALINA_HOME：安装tomcat的路径 ​ path：;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;%CATALINA_HOME%\bin;%CATALINA_HOME%\li 3.配置mysql的环境变量​ 1.配置MYSQL_Home: mysql的安装路径 ​ 2.在path中添加: %MYSQL_HOME%/bin ​ 3.新建my.ini文件,解压包里是没有my-dafault.ini或自带my.ini文件，需自己创建放到解压目录下: 12345678910111213141516[mysql]# 设置mysql客户端默认字符集default-character-set=utf8 [mysqld]# 设置3306端口port = 3306 # 设置mysql的安装目录basedir=C:\Program Files\mysql-5.7.21-winx64# 设置mysql数据库的数据的存放目录datadir=C:\Program Files\mysql-5.7.21-winx64\data# 允许最大连接数max_connections=200# 设置mysql服务端默认字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB ​ 4.向windows注册mysql服务。必须用管理员权限打开命令行，然后切换到mysql的bin目录下，输入命令：mysqld.exe –install MySql –defaults-file=”C:/java/mysql-5.6/my-default.ini”,【C:/java/mysql-5.6/my-default.ini】改为自己的mysql安装目录。 ​ 5.启动mysql服务 ：net start mysql ​ ==注意：如果打开 【出现服务器名无效】则进入bin目录输入mysqld —install后在执行net start mysql== ​ 6.修改密root用户密码：mysql -u root -p ，然后set password = password(‘新密码’); 将maven部署到Linux(Centos) 第一次玩linux就遇到很棘手的问题，装环境没啥大问题。等到最后部署maven的时候踩了很多坑，其中因为装mysql和tomcat的时候都是直接用命令，也没有配置环境变量，导致也不知道mysql中的webApps在哪里(放war包)，最后上网找，百度放入才知道放到/user/share/tomcat中。放入war包之后呢又出现问题了老是出现404的错误，原来是因为maven install的时候没有将xml和properties导出来(一万头***飘过)。 现在来看看问题，首先在pom中添加: 12345678910111213141516171819 &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt;&lt;!-- 由于修改了默认的resource目录，导致src/main/resources的所有文件都不能被扫描，因此还要配多一个 --&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; 这样会将java和resource中的xml和properties给导入war中。 部署到linux是通过热部署(maven build之后【clean package tomcat7:】命令) 1234567891011121314&lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;configuration&gt; &lt;url&gt;http://140.143.226.88:80/manager/text&lt;/url&gt; &lt;update&gt;true&lt;/update&gt; &lt;path&gt;/Shop&lt;/path&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;******&lt;/password&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;]]></content>
      <categories>
        <category>iOS</category>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>热部署</tag>
        <tag>环境变量</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员必备软件(持续更新中...)]]></title>
    <url>%2F2018%2F07%2F17%2F%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[前言程序员的任务就是开发，那开发自然少不了一些软件的帮助，那么有哪些软件是开发必须的或者是一定程度上提高开发效率的呢？ 接下来就会介绍一下我自己电脑上必备的软件和使用教程(有些自己写的，也有是别人写的)。本篇文章主要针对 Mac 的用户，当然介绍的软件也有 windows 版本，就麻烦看客自行上网搜索吧。 先展示一下我电脑上的软件截图： 或许你也有相同的软件，那么就请你忽略这些。上面的软件大部分我都有安装包，如果有需要的请私聊我获取软件的资源，毕竟一些破解的不方便给出，还请见谅。 提高效率软件Typora 一款集 编辑预览 于一身的 MarkDown 编辑器，界面简洁，功能强大，操作简单。 教程入口 iPic Mac 上非常好用的图床神器，配合着 Typora 可以大大提高写博客的效率。 Windows 上有对应的 MPic。 教程入口 LICEcap 一款 操作简单、功能强大、性能卓越 的屏幕 GIF 录制工具软件。 教程入口 必备软件Android Studio 这可是吃饭的软件，我是一名 Android 程序的开发者，自然少不了。 教程入口 Intellij IDEA 这个一般作为我巩固 Java 基础或是学习后端的软件。 教程入口1 教程入口2 PyCharm Python 的开发工具。 教程入口 网易云音乐 这个不用多说吧，程序员和音乐更配哦，最近网易云不少音乐的版权要了回来，更加的爱它了。 Latern 额…你懂得，输入我的邀请码 57QP4H 来获得三个月的蓝灯专业版！立即下载 。不需要的可以忽视。 未完待续…]]></content>
      <categories>
        <category>程序员必备软件</category>
      </categories>
      <tags>
        <tag>工具软件</tag>
        <tag>提高效率</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet增删改查]]></title>
    <url>%2F2018%2F07%2F15%2FServlet%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 Servlet增删改查CRUD(创建，读取，更新和删除)应用程序是任何项目开发的最重要的应用程序。 在Servlet中，我们可以轻松创建CRUD应用程序。 Servlet CRUD示例在MySQL数据库中使用序列自动递增ID创建“employees”表。这个表中有以下几个字段：id，name，age，address和salary。 创建表的SQL语句如下 - 123456789CREATE TABLE `employees` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `name` varchar(64) NOT NULL DEFAULT '', `age` int(3) unsigned NOT NULL DEFAULT '0', `education` varchar(32) DEFAULT '' COMMENT '学历', `address` varchar(254) DEFAULT NULL, `salary` float(8,2) unsigned DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8; 打开Eclipse，创建一个动态Web项目：ServletIDUS ，其完整的目录结构如下所示 - 文件：index.html - 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;添加新员工&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action="SaveServlet" method="post"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;&lt;input type="text" name="name" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;年龄&lt;/td&gt; &lt;td&gt;&lt;input type="text" name="age" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;学历&lt;/td&gt; &lt;td&gt;&lt;select name="education" style="width: 150px"&gt; &lt;option value="专科"&gt;专科&lt;/option&gt; &lt;option value="本科"&gt;本科&lt;/option&gt; &lt;option value="研究生"&gt;研究生&lt;/option&gt; &lt;option value="博士"&gt;博士&lt;/option&gt; &lt;option value="其他"&gt;其他&lt;/option&gt; &lt;/select&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;地址&lt;/td&gt; &lt;td&gt;&lt;input type="text" name="address" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;薪水&lt;/td&gt; &lt;td&gt;&lt;input type="text" name="salary" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="2"&gt;&lt;input type="submit" value="保存员工信息" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;br /&gt; &lt;a href="ViewServlet"&gt;查看员工信息表&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; 文件：Emp.java - 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.xq.JDBCIDUC;public class Emp &#123; private int id; private String name; private int age; private String address; private String education; private float salary; public int getId() &#123; return id; &#125; public String getEducation() &#123; return education; &#125; public void setEducation(String education) &#123; this.education = education; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public String getAddress() &#123; return address; &#125; public void setAddress(String address) &#123; this.address = address; &#125; public float getSalary() &#123; return salary; &#125; public void setSalary(float salary) &#123; this.salary = salary; &#125;&#125; 文件：EmpDao.java - 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145package com.xq.JDBCIDUC;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import com.mysql.jdbc.PreparedStatement;public class EmpDao &#123; //表名称 private static String DB_name ="employees"; public static Connection getConnection() &#123; Connection conn = null; try &#123; Class.forName("com.mysql.jdbc.Driver"); try &#123; conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/test?useSSL=false&amp;charaterEncoding=utf-8", "root", "XQ3720xq"); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; catch (ClassNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return conn; &#125; //添加员工信息 public static int Save(Emp e) &#123; int status = 0; try &#123; Connection con = EmpDao.getConnection(); String sql = " insert into " + DB_name + "(name,age,education,address,salary) values (?,?,?,?,?)"; PreparedStatement ps = (PreparedStatement)con.prepareStatement(sql); ps.setString(1, e.getName()); ps.setInt(2, e.getAge()); ps.setString(3, e.getEducation()); ps.setString(4, e.getAddress()); ps.setFloat(5, e.getSalary()); status = ps.executeUpdate(); con.close(); &#125; catch (Exception e2) &#123; e2.printStackTrace(); &#125; return status; &#125; //修改员工信息 public static int update(Emp emp) &#123; int statues = 0; Connection conn = EmpDao.getConnection(); String sql = " UPDATE " + DB_name + " SET name=?,age=?,education=?,address=?,salary=? where id = ?"; try &#123; PreparedStatement ps = (PreparedStatement)conn.prepareStatement(sql); ps.setString(1, emp.getName()); ps.setInt(2, emp.getAge()); ps.setString(3, emp.getEducation()); ps.setString(4, emp.getAddress()); ps.setFloat(5, emp.getSalary()); ps.setInt(6, emp.getId()); statues = ps.executeUpdate(); conn.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return statues; &#125; //删除员工信息 public static int delete(Integer id) &#123; int statues = 0; Connection conn = EmpDao.getConnection(); String sql = "DELETE FROM " + DB_name + " where id=?"; try &#123; PreparedStatement ps = (PreparedStatement)conn.prepareStatement(sql); ps.setInt(1, id); statues = ps.executeUpdate(); conn.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return statues; &#125; //通过查看员工ID信息 public static Emp getEmployeeByID(Integer id) &#123; Emp emp = new Emp(); Connection conn = EmpDao.getConnection(); String sql = "select * from "+DB_name+" where id=? "; try &#123; PreparedStatement ps = (PreparedStatement)conn.prepareStatement(sql); ps.setInt(1, id); ResultSet rs = ps.executeQuery(); while(rs.next()) &#123; emp.setId(rs.getInt("id")); emp.setName(rs.getString("name")); emp.setAge(rs.getInt("age")); emp.setEducation(rs.getString("education")); emp.setAddress(rs.getString("address")); emp.setSalary(rs.getFloat("salary")); &#125; conn.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return emp; &#125; //将员工信息存入到数组中 public static List&lt;Emp&gt; getAllEmployees()&#123; List&lt;Emp&gt; list = new ArrayList&lt;&gt;(); Connection conn = EmpDao.getConnection(); String sql = " SELECT * FROM " + DB_name + " ORDER BY ID DESC "; try &#123; PreparedStatement ps = (PreparedStatement)conn.prepareStatement(sql); ResultSet rs = ps.executeQuery(); while(rs.next()) &#123; Emp emp = new Emp(); emp.setId(rs.getInt("id")); emp.setName(rs.getString("name")); emp.setAge(rs.getInt("age")); emp.setEducation(rs.getString("education")); emp.setAddress(rs.getString("address")); emp.setSalary(rs.getFloat("salary")); list.add(emp); &#125; conn.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return list; &#125;&#125; 文件：SaveServlet.java - 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package com.xq.JDBCIDUC;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class SaveServlet */@WebServlet("/SaveServlet")public class SaveServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public SaveServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub response.getWriter().append("Served at: ").append(request.getContextPath()); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); String name = request.getParameter("name"); String age = request.getParameter("age"); String education = request.getParameter("education"); String address = request.getParameter("address"); String salary = request.getParameter("salary"); Emp e = new Emp(); e.setName(name); e.setAge(Integer.parseInt(age)); e.setEducation(education); e.setAddress(address); e.setSalary(Float.parseFloat(salary)); int statues = EmpDao.Save(e); if(statues &gt; 0) &#123; out.print("&lt;p&gt;添加员工信息成功!&lt;/p&gt;"); request.getRequestDispatcher("index.html").include(request, response); &#125;else &#123; out.print("对不起，添加失败"); &#125; out.close(); &#125;&#125; 文件：EditServlet.java - 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121package com.xq.JDBCIDUC;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class EditServlet */@WebServlet("/EditServlet")public class EditServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public EditServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); out.println("&lt;h1&gt;更新员工信息&lt;/h1&gt;"); String sid = request.getParameter("id"); int id = Integer.parseInt(sid); Emp emp = EmpDao.getEmployeeByID(id); String education = emp.getEducation(); out.print("&lt;form action='EditServlet' method='post'&gt;"); out.print("&lt;table&gt;"); out.print("&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;input type='hidden' name='id' value='"+emp.getId() + "'/&gt;&lt;/td&gt;&lt;/tr&gt;"); out.print("&lt;tr&gt;&lt;td&gt;姓名&lt;/td&gt;&lt;td&gt;&lt;input type='text' name='name' value='"+emp.getName() + "'/&gt;&lt;/td&gt;&lt;/tr&gt;"); out.print("&lt;tr&gt;&lt;td&gt;年龄&lt;/td&gt;&lt;td&gt;&lt;input type='text' name='age' value='"+emp.getAge() + "'/&gt;&lt;/td&gt;&lt;/tr&gt;"); out.print("&lt;tr&gt;&lt;td&gt;地址&lt;/td&gt;&lt;td&gt;&lt;input type='text' name='address' value='"+emp.getAddress() + "'/&gt;&lt;/td&gt;&lt;/tr&gt;"); out.println("&lt;tr&gt;&lt;td&gt;学历&lt;/td&gt;&lt;td&gt;"); out.print("&lt;select name='education' style='width: 150px'&gt;"); if(education == "专科") &#123; out.print("&lt;option value='专科' selected='selected'&gt;专科&lt;/option&gt;"); &#125;else &#123; out.print("&lt;option value='专科'&gt;专科&lt;/option&gt;"); &#125; if(education == "本科") &#123; out.print("&lt;option value='本科' selected='selected'&gt;本科&lt;/option&gt;"); &#125;else &#123; out.print("&lt;option value='本科'&gt;本科&lt;/option&gt;"); &#125; if(education == "研究生") &#123; out.print("&lt;option value='研究生' selected='selected'&gt;研究生&lt;/option&gt;"); &#125;else &#123; out.print("&lt;option value='研究生'&gt;研究生&lt;/option&gt;"); &#125; if(education == "博士") &#123; out.print("&lt;option value='博士' selected='selected'&gt;博士&lt;/option&gt;"); &#125;else &#123; out.print("&lt;option value='博士'&gt;博士&lt;/option&gt;"); &#125; if(education == "其它") &#123; out.print("&lt;option value='其它' selected='selected'&gt;其它&lt;/option&gt;"); &#125;else &#123; out.print("&lt;option value='其它'&gt;其它&lt;/option&gt;"); &#125; out.print("&lt;/select&gt;"); out.print("&lt;/td&gt;&lt;/tr&gt;"); out.print("&lt;tr&gt;&lt;td&gt;薪水:&lt;/td&gt;&lt;td&gt;&lt;input type='text' name='salary' value='" + emp.getSalary() + "'/&gt;&lt;/td&gt;&lt;/tr&gt;"); out.print("&lt;tr&gt;&lt;td colspan='2'&gt;&lt;input type='submit' value='编辑&amp;保存'/&gt;&lt;/td&gt;&lt;/tr&gt;"); out.print("&lt;/table&gt;"); out.print("&lt;/form&gt;"); out.close(); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); String sid = request.getParameter("id"); int id = Integer.parseInt(sid); String name = request.getParameter("name"); String age = request.getParameter("age"); String address = request.getParameter("address"); String education = request.getParameter("education"); String salary = request.getParameter("salary"); Emp emp = new Emp(); emp.setId(id); emp.setName(name); emp.setAge(Integer.parseInt(age)); emp.setEducation(education); emp.setAddress(address); emp.setSalary(Float.parseFloat(salary)); int statues = EmpDao.update(emp); if(statues &gt; 0) &#123; response.sendRedirect("ViewServlet"); &#125;else &#123; out.print("对不起更新信息失败!"); &#125; out.close(); &#125;&#125; 文件：DeleteServlet.java - 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.xq.JDBCIDUC;import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class DeleteServlet */@WebServlet("/DeleteServlet")public class DeleteServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public DeleteServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); String sid = request.getParameter("id"); int id = Integer.parseInt(sid); EmpDao.delete(id); response.sendRedirect("ViewServlet"); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; &#125;&#125; 文件：ViewServlet.java - 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.xq.JDBCIDUC;import java.io.IOException;import java.io.PrintWriter;import java.util.List;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class ViewServlet */@WebServlet("/ViewServlet")public class ViewServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public ViewServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); out.println("&lt;a href='index.html'&gt;添加新员工&lt;/a&gt;"); out.println("&lt;h1&gt;员工列表&lt;/h1&gt;"); List&lt;Emp&gt; list=EmpDao.getAllEmployees(); out.print("&lt;table border='1' width='100%'"); out.print("&lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;学历&lt;/th&gt;&lt;th&gt;薪水&lt;/th&gt;&lt;th&gt;地址&lt;/th&gt;&lt;th&gt;操作&lt;/th&gt;&lt;/tr&gt;"); for(Emp e:list)&#123; out.print("&lt;tr&gt;&lt;td&gt;"+e.getId()+"&lt;/td&gt;&lt;td&gt;"+e.getName()+"&lt;/td&gt;&lt;td&gt;"+e.getAge()+"&lt;/td&gt;&lt;td&gt;"+e.getEducation()+"&lt;/td&gt;&lt;td&gt;"+e.getSalary()+"&lt;/td&gt;&lt;td&gt;"+e.getAddress()+"&lt;/td&gt;&lt;td&gt;&lt;a href='EditServlet?id="+e.getId()+"'&gt;编辑&lt;/a&gt; | &lt;a href='DeleteServlet?id="+e.getId()+"' onClick=\"return confirm('确定要删除吗？')\"&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;"); &#125; out.print("&lt;/table&gt;"); out.close(); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; 注意： 这里不需要配置web.xml，所有Servlet的模式映射都是使用@WebServlet(&quot;/mapurl&quot;) 注解来声明了。 在编写上面代码后，部署此Web应用程序(在项目名称上点击右键-&gt;”Run On Server…”)，打开浏览器访问URL： http://localhost:8080/ServletIDUS/ ，如果没有错误，应该会看到以下结果 - 添加一个员工信息，如下 - 点击保存员工信息提交后，得到以下结果 - 查看员工列表： http://localhost:8080/ServletIDUS/ViewServlet/ 查看员工列表： 删除员工信息：]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>增删改查</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet HttpSession登录注销实例]]></title>
    <url>%2F2018%2F07%2F15%2FServlet%20HttpSession%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 我们可以绑定HttpSession实例上的对象，并使用setAttribute和getAttribute方法获取对象的数据信息。 在这里，将演示一个在不使用数据库连接的情况下，创建一个真实的登录和注销应用程序。假设有一个用户名是：admin，它密码是admin123。 注： 访问这里查看：使用cookies登录和注销的应用程序示例 ，有助于学习本节文章的内容。 在这个例子中，我们创建了3个链接页面：登录，注销和个人资料。实现功能：用户在登录之前不能进入个人资料页面。如果用户已经注销，则需要再次登录才能访问个人资料页面。 在这个应用程序中，创建了以下几个文件。 index.html - Web应用程序首页。 link.html - 链接页面。 login.html - 登录页面 LoginServlet.java - 登录Servlet处理。 LogoutServlet.java - 注销Servlet处理。 ProfileServlet.java - 用户个人资料Servlet。 web.xml - Servlet配置文件。 打开Eclipse，创建一个动态Web项目：SessionLoginout，其完整的目录结构如下所示 - 文件：index.html - 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;登录注册实例&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div style="text-align: center;"&gt; &lt;h2&gt;欢迎Session登录注销应用程序&lt;/h2&gt; &lt;a href="login.html"&gt;登录&lt;/a&gt;| &lt;a href="logout"&gt;注销&lt;/a&gt;| &lt;a href="profile"&gt;个人信息&lt;/a&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 文件：link.html - 123456789101112&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;/head&gt;&lt;body&gt; &lt;a href="login.html"&gt;登录&lt;/a&gt;| &lt;a href="logout"&gt;注销&lt;/a&gt;| &lt;a href="profile"&gt;个人信息&lt;/a&gt; &lt;hr&gt;&lt;/body&gt;&lt;/html&gt; 文件：login.html - 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;登录实例&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div style="text-align: center;padding-top: 12px"&gt; &lt;form action="login" method="post"&gt; 用户名:&lt;input type="text" name="username" /&gt; 密码:&lt;input type="password" name="password" /&gt; &lt;input type="submit" value="登录"&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 文件：LoginSession.java - 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.xq.SessionLoginout;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;/** * Servlet implementation class LoginSession */@WebServlet("/LoginSession")public class LoginSession extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public LoginSession() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub response.getWriter().append("Served at: ").append(request.getContextPath()); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); request.getRequestDispatcher("link.html").include(request, response); String username = request.getParameter("username"); String password = request.getParameter("password"); if(username.equals("admin")&amp;&amp;password.equals("admin123")) &#123; out.print("Welcome,"+username); HttpSession session = request.getSession(); session.setAttribute("username", username); session.setAttribute("nickname", "小琦"); session.setAttribute("age", "24"); &#125;else &#123; out.print("&lt;font style='color:red;'&gt;对不起，用户名和密码输入错误!&lt;/font&gt;"); request.getRequestDispatcher("login.html").include(request, response); &#125; out.close(); &#125;&#125; 文件：logoutServlet.java - 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.xq.SessionLoginout;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;/** * Servlet implementation class LogoutServlet */@WebServlet("/LogoutServlet")public class LogoutServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public LogoutServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); request.getRequestDispatcher("link.html").include(request, response); HttpSession session = request.getSession(); session.invalidate(); out.print("您已成功注销退出系统"); out.close(); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; 文件：ProfileServlet.java - 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.xq.SessionLoginout;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;/** * Servlet implementation class ProfileServlet */@WebServlet("/ProfileServlet")public class ProfileServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public ProfileServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); request.getRequestDispatcher("link.html").include(request, response); HttpSession session = request.getSession(false); if(session!=null) &#123; String username = (String)session.getAttribute("username"); String nickname = (String)session.getAttribute("nickname"); String age =(String)session.getAttribute("age"); out.print("您好，"+ username + "欢迎来到个人信息页面"); out.print("&lt;hr/&gt;个人信息如下,昵称:"+nickname+", 年龄:"+age); &#125;else &#123; out.print("请登录系统!"); request.getRequestDispatcher("login.html").include(request, response); &#125; out.close(); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; 文件：web.xml - 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app &gt; &lt;display-name&gt;SessionLoginout&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;description&gt;&lt;/description&gt; &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.SessionLoginout.LoginSession&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/login&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;ProfileServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.SessionLoginout.ProfileServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;ProfileServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/profile&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;LogoutServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.SessionLoginout.LogoutServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;LogoutServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/logout&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 在编写上面代码后，部署此Web应用程序(在项目名称上点击右键-&gt;”Run On Server…”)，打开浏览器访问URL： http://localhost:8080/SessionLoginout/ ，如果没有错误，应该会看到以下结果 - 点击“登录”，如下界面 - 使用用户名：admin ，密码：admin123，点击登录成功后，如下界面 - 用户名或密码错误时，显示如下 - 点击“个人信息”链接，显示如下 - 点击“注销”链接，显示如下 -]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>登录注销</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet登录注销Cookies实例]]></title>
    <url>%2F2018%2F07%2F14%2FServlet%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80Cookies%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 Cookie是存储在客户端的一种信息技术。 在这个例子中，我们创建了3个链接：登录，注销和用户资料。用户在未登录之前不能进入个人资料页面。如果用户已经注销，则需要再次登录才能访问个人资料。 index.html - Web应用程序首页。 link.html - 链接页面。 login.html - 登录页面。 LoginServlet.java - 登录Servlet处理。 LogoutServlet.java - 注销Servlet处理。 ProfileServlet.java - 用户个人资料Servlet。 web.xml - Servlet配置文件。 打开Eclipse，创建一个动态Web项目：LoginWithCookies，其完整的项目结构如下图所示 - 文件：index.html - 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;使用Cookie登录应用程序&lt;/title&gt;&lt;/head&gt;&lt;body style="text-align: center;"&gt; &lt;h2&gt;欢迎使用Cookie登录应用程序&lt;/h2&gt; &lt;a href="login.html"&gt;登录&lt;/a&gt; &lt;a href="logout"&gt;注销&lt;/a&gt; &lt;a href="profile"&gt;个人信息&lt;/a&gt;&lt;/body&gt;&lt;/html&gt; 文件：link.html - 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;/head&gt;&lt;body&gt; &lt;a href="login.html"&gt;登录&lt;/a&gt; &lt;a href="logout"&gt;注销&lt;/a&gt; &lt;a href="profile"&gt;个人信息&lt;/a&gt; &lt;hr&gt;&lt;/body&gt;&lt;/html&gt; 文件：login.html - 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;/head&gt;&lt;body&gt; &lt;div style="text-align: center; padding-top: 12px"&gt; &lt;form action="login" method="post"&gt; 用户名: &lt;input type="text" name="name"&gt;密码: &lt;input type="password" name="password"&gt; &lt;input type="submit" value="登录"&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 文件：LoginServlet.java - 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.xq.LoginCookie;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class LoginServlet */@WebServlet("/LoginServlet")public class LoginServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public LoginServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); request.getRequestDispatcher("link.html").include(request, response); String name = request.getParameter("name"); String password = request.getParameter("password"); if(name.equals("admin")&amp;&amp;password.equals("123456")) &#123; out.print("你已成功登录系统!"); out.print("&lt;br&gt; 欢饮您! "+name); Cookie ck = new Cookie(name, password); response.addCookie(ck); &#125;else &#123; out.print("&lt;font style='color:red;'&gt;用户名或密码错误!&lt;/font&gt;"); request.getRequestDispatcher("login.html").include(request, response); &#125; out.close(); &#125;&#125; 文件：LogoutServlet.java - 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.xq.LoginCookie;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class logoutServlet */@WebServlet("/logoutServlet")public class logoutServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public logoutServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); request.getRequestDispatcher("link.html").include(request, response); Cookie ck = new Cookie("name", ""); ck.setMaxAge(0); response.addCookie(ck); out.print("您已成功注销!"); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; 文件：ProfileServlet.java - 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.xq.LoginCookie;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class ProfileServlet */@WebServlet("/ProfileServlet")public class ProfileServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public ProfileServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); request.getRequestDispatcher("link.html").include(request, response); Cookie ck[] = request.getCookies(); if(ck!=null) &#123; String name = ck[0].getName(); if(name.equals("")||name!=null) &#123; out.print("&lt;b&gt;欢迎来到个人信息中心&lt;/b&gt;"); out.print("&lt;br&gt;您好, " + name); &#125; &#125;else &#123; out.print("&lt;font style='color:red;'&gt;请先登录&lt;/font&gt;"); request.getRequestDispatcher("login.html").include(request, response); &#125; out.close(); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; 文件：web.xml - 123456789101112131415161718192021222324252627282930313233343536&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app &gt; &lt;display-name&gt;LoginWithCookies&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.LoginCookie.LoginServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/login&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;LogoutServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.LoginCookie.logoutServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;LogoutServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/logout&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;ProfileServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.LoginCookie.ProfileServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;ProfileServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/profile&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 在编写所有上面文件代码之后，部署这个Web应用程序，打开浏览器访问URL： http://localhost:8080/LoginWithCookies/ ，如果代码没有错误，应该会看到以下结果 - 点击“登录”链接，输入用户名和密码：admin 和 123456 ，应该会看到以下结果 - 提交登录成功后，看到以下结果 - 查看个人信息 - 注销个人信息 -]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>登录注销Cookies</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet表单隐藏字段]]></title>
    <url>%2F2018%2F07%2F14%2FServlet%E8%A1%A8%E5%8D%95%E9%9A%90%E8%97%8F%E5%AD%97%E6%AE%B5%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 在隐藏表单字段的情况下，一般使用隐藏(不可见)文本字段来维护用户的状态。 在这种情况下，我们将信息存储在隐藏字段中，并从另一个servlet获取信息。 如果必须在所有页面中提交表单，但不想依赖浏览器，这种方法会更好。 下面来看看看在隐藏字段中存储值的代码。 1&lt;input type="hidden" name="uname" value="maxsu"&gt; 这里，必须指定input控件的type属性为：type=&quot;hidden&quot;， uname是隐藏的字段名称，maxsu是隐藏字段uname的值。 应用隐藏表单字段 它广泛用于网站的评论形式。 在这种情况下，我们将页面ID或页面名称存储在隐藏字段中，以便可以唯一标识每个页面。 隐藏表单字段的优势 Cookie是否被禁用隐藏表单字段都会始终有效。 隐藏表单字段的缺点： 它在服务器端维护。 每个页面需要额外提交表单和字段。 只能使用文本信息。 使用隐藏表单字段的示例 打开Eclipse，创建一个动态Web项目：HiddenFormField，其完整的目录结构如下所示 - 文件：index.html - 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;隐藏表单字段&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div style="text-align: center;padding-top: 12px"&gt; &lt;form action="servlet1" method="post"&gt; 名字:&lt;input type="text" name="username" /&gt;&lt;input type="submit" value="提交" /&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 文件：FirstServlet.java - 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.xq.HiddenForm;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class FirstServlet */@WebServlet("/FirstServlet")public class FirstServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public FirstServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; try &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); String username = request.getParameter("username"); out.print("Welcome : "+username); out.print("&lt;form action='servlet2' method='post'&gt;"); out.print("&lt;input type='hidden' name='username' value='" + username + "'&gt;"); out.print("&lt;input type='submit' value='提交'&gt;"); out.print("&lt;/form&gt;"); out.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 文件：SecondServlet.java - 12345678910111213141516171819202122232425262728293031323334353637383940414243package com.xq.HiddenForm;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class SecondServlet */@WebServlet("/SecondServlet")public class SecondServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public SecondServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; try &#123; resp.setCharacterEncoding("UTF-8"); resp.setContentType("text/html;charset=UTF-8"); req.setCharacterEncoding("UTF-8"); PrintWriter out = resp.getWriter(); String username = req.getParameter("username"); out.println("Hello : "+username); &#125; catch (Exception e) &#123; e.printStackTrace(); // TODO: handle exception &#125; &#125; &#125; 文件：web.xml - 12345678910111213141516171819202122232425262728&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app &gt; &lt;display-name&gt;HiddenFormField&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;servlet-name&gt;f1&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.HiddenForm.FirstServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;f1&lt;/servlet-name&gt; &lt;url-pattern&gt;/servlet1&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;f2&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.HiddenForm.SecondServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;f2&lt;/servlet-name&gt; &lt;url-pattern&gt;/servlet2&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 在编写上面代码后，部署此Web应用程序，打开浏览器访问URL： http://localhost:8080/HiddenFormField/，如果没有错误，应该会看到以下结果 - 在上面输入框中输入：小琦，提交应该会看到以下结果 - 然后使用表单隐藏字段，再次提交，应该会看到以下结果 -]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>表单隐藏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet Cookies]]></title>
    <url>%2F2018%2F07%2F14%2FServlet%20Cookies%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 Cookie是在多个客户端请求之间持久存储的一小段信息。 Cookie具有名称，单个值和可选属性，例如注释，路径和域限定符，生存周期和版本号。 Cookie工作原理默认情况下，每个请求都被视为新的请求。在cookie技术中，servlet响应可以添加cookie。 所以cookie存储在浏览器的缓存中。之后，如果用户发出请求，默认情况下会带上cookie。 因此，我们就可以知道用户旧用户。 Cookie类型Servlet中有2种类型的Cookie。 非持久性cookie 持久性Cookie 非持久性cookie 它仅适用于单个会话。当用户关闭浏览器时都会删除它。 持久性Cookie 它对多个会话有效。当用户关闭浏览器时也不会删除它。只有在用户注销或注销时才被删除。 Cookie的优点 维持状态最简单的技术。 Cookie在客户端维护。 Cookie的缺点 如果从浏览器中禁用Cookie，则无法正常工作。 只能在Cookie对象中设置文本信息。 Servlet Cookie的应用示例在这个例子中，我们将用户名称(username)存储在cookie对象中，并在另一个servlet中访问它，会话对应于特定用户。所以如果从多个浏览器访问指定cookie名称，那么将得到不同的值。 打开Eclipse，创建一个动态Web项目：CookieServlet，其完整的项目结构如下 - 以下是几个主要代码文件。 文件：index.html - 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;Cookies In Servlet&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div style="text-align:center;"&gt; &lt;form action="servlet1" method="post"&gt; 用户名：&lt;input type="text" name="username" value="xiao'qi"/&gt;&lt;input type="submit" value="提交" /&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 文件：FirstServlet.java - 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package com.xq.Cookie;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class FirstServlet */@WebServlet("/FirstServlet")public class FirstServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public FirstServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; try &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html"); PrintWriter out = response.getWriter(); String name = request.getParameter("username"); String username = new String(name.getBytes("ISO-8859-1"),"utf-8"); out.print("&lt;!DOCTYPE html&gt;\r\n" + "&lt;html&gt;\r\n" + "&lt;head&gt;\r\n" + "&lt;meta charset=\"UTF-8\"&gt;&lt;body&gt;"); out.print("欢迎您, " + username); Cookie ck = new Cookie("uname", username);// creating cookie object response.addCookie(ck);// adding cookie in the response // creating submit button out.print("&lt;form action='servlet2' method='post'&gt;"); out.print("&lt;p&gt;Cookies已在浏览器中设置，现在跳转到第二个Servlet中读取Cookies的值。&lt;/p&gt;"); out.print("&lt;input type='submit' value='提交到第二个Servlet'&gt;"); out.print("&lt;/form&gt;"); out.close(); &#125; catch (Exception e) &#123; System.out.println(e); &#125; &#125;&#125; 文件：SecondServlet.java - 123456789101112131415161718192021222324252627282930313233343536373839404142package com.xq.Cookie;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class SecondServlet */@WebServlet("/SecondServlet")public class SecondServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public SecondServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; try &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html"); PrintWriter out = response.getWriter(); Cookie ck[] = request.getCookies(); out.print("Hello " + ck[0].getValue()); out.close(); &#125; catch (Exception e) &#123; System.out.println(e); &#125; &#125;&#125; 文件：web.xml - 12345678910111213141516171819202122232425262728&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app &gt; &lt;display-name&gt;CookieServlet&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;servlet-name&gt;FServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.Cookie.FirstServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;FServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/servlet1&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;SServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.Cookie.SecondServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;SServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/servlet2&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 在完成上面代码编写后，部署这个Web应用程序，打开浏览器访问URL： http://localhost:8080/CookieServlet ， 如是程序没有错误，应该会看到以下结果 - 提交后，看到以下界面 - 在第二个Servlet中读取的Cookies值如下 -]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>Cookies</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet请求转发和重定向]]></title>
    <url>%2F2018%2F07%2F14%2FServlet%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 一、Servlet RequestDispatcher请求转发RequestDispatcher接口提供将请求转发送到另一个资源的功能，它可能是html，servlet或jsp等。 此接口也可用于包括另一资源的内容。它是servlet协作的一种方式，工作在服务器端。 在RequestDispatcher接口中定义了两种方法。它们分别是 ： 编号 方法 描述 1 public void forward(ServletRequest request,ServletResponse response)throws ServletException,java.io.IOException 将servlet的请求转发到服务器上的另一个资源(servlet，JSP文件或HTML文件)。 2 public void include(ServletRequest request,ServletResponse response)throws ServletException,java.io.IOException 在响应中包含资源的内容(servlet，JSP页面或HTML文件)。 如上图所示，第一个servlet转发请求到第二个servlet的响应发送给客户端。 第一个servlet的响应不会显示给用户。 如上图所示，第二个servlet的响应将包含在发送给客户端的第一个servlet的响应中。 二、Servlet 重定向HttpServletResponse接口的sendRedirect()方法可以用于将响应重定向到另一个资源，资源可能是servlet，jsp或html文件。它接受相对和绝对URL。 它在客户端工作，因为它使用浏览器的URL栏来发出另一个请求。 所以，它可以在服务器内部和外部工作。 三、forward()和sendRedirect()方法的区别RequestDispatcher的forward()方法和HttpServletResponse接口的sendRedirect()方法之间存在很多差异。如下面给出： forward()方法 sendRedirect()方法 forward()方法在服务器端工作。 sendRedirect()方法在客户端工作 它将相同的请求和响应对象发送到另一个servlet。 他总是发送一个新的请求 他只能在服务器内工作 可以在服务器外工作 request.getRequestDispacher(&quot;servlet2&quot;).forward(request,response); response.sendRedirect(&quot;servlet2&quot;)]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>请求转发</tag>
        <tag>重定向</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet身份验证过滤器]]></title>
    <url>%2F2018%2F07%2F13%2FServlet%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E8%BF%87%E6%BB%A4%E5%99%A8%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 可以在过滤器中执行身份认证。 在这里，我们将如何在过滤器类检查由用户提交的密码，如果给定密码为admin，它将把请求转发到WelcomeAdmin servlet，否则会显示错误消息。 使用过滤器验证用户的示例 下面来看看如何使用过滤器验证用户的简单示例。 在这个示例中创建了以下几个主要的代码文件： index.html - 首页 MyFilter.java - 过滤器，用于处理用户登录信息和跳转。 AdminServlet.java - 管理员的Servlet web.xml - 项目描述符和配置信息。 打开Eclipse，创建一个动态Web项目：Authentication ，其完整的目录结构如下所示 - 以下是这个项目中的几个主要的代码文件。 文件：index.html - 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;Servlet身份验证过滤器&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div style="font-align:center;"&gt; &lt;form action="login" method="post"&gt; 用户名: &lt;input type="text" name="username" value="xiaoqi"/&gt;密码: &lt;input type="password" name="password"/&gt; &lt;input type="submit" value="登录"/&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 文件：MyFilter.java - 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.xq.Filter;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.Filter;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.RequestDispatcher;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;public class MyFilter implements Filter&#123; @Override public void destroy() &#123; System.out.println("MyFilter.destory"); &#125; @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); String password = request.getParameter("password"); if(password==null) &#123; password = ""; &#125; if(password.equals("admin")) &#123; chain.doFilter(request, response); &#125;else &#123; out.print("用户名或密码错误!"); RequestDispatcher rd = request.getRequestDispatcher("index.html"); rd.include(request, response); &#125; &#125; @Override public void init(FilterConfig arg0) throws ServletException &#123; // TODO Auto-generated method stub &#125;&#125; 文件：AdminServlet.java - 12345678910111213141516171819202122232425262728package com.xq.Filter;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class AdminServlet extends HttpServlet&#123; /** * */ private static final long serialVersionUID = 1L; @Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123; resp.setCharacterEncoding("UTF-8"); resp.setContentType("text/html;charset=UTF-8"); req.setCharacterEncoding("UTF-8"); PrintWriter out = resp.getWriter(); out.print("欢迎来到ADMIN界面~~"); out.close(); &#125;&#125; 文件：web.xml - 123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app &gt; &lt;display-name&gt;Authentication&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;servlet-name&gt;AdminServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.Filter.AdminServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;AdminServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/login&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;filter&gt; &lt;filter-name&gt;f1&lt;/filter-name&gt; &lt;filter-class&gt;com.xq.Filter.MyFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;f1&lt;/filter-name&gt; &lt;url-pattern&gt;/login&lt;/url-pattern&gt; &lt;/filter-mapping&gt;&lt;/web-app&gt; 在编写上面代码后，部署此Web应用程序(在项目名称上点击右键-&gt;”Run On Server…”)，打开浏览器访问URL： http://localhost:8080/Authentication/ ，如果没有错误，应该会看到以下结果 - 输入密码：admin，然后提交表单登录，应该会看到以下结果 -]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>身份验证</tag>
        <tag>过滤器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet生命周期]]></title>
    <url>%2F2018%2F07%2F13%2FServlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 Servlet的生命周期，主要分为一下几个步骤 加载Servlet类 创建Servlet类 调用Servlet类的init方法 调用Servlet的service方法 调用Servlet的destroy方法 如果Sevlet实例被创建，则Servlet处于新状态。调用init()方法后，Servlet进入就绪状态。在就绪状态下，servlet执行所有任务。当web容器调用destroy()方法时，它转移到结束状态。 加载Servlet类 类加载器负责加载servlet类。 当Web容器接收到servlet的第一个请求时，将加载servlet类。 创建Servlet实例 Web容器在加载servlet类之后创建一个servlet的实例。servlet实例在servlet生命周期中只创建一次。 调用init方法 Web容器在创建servlet实例后调用init方法一次。 init方法用于初始化servlet。 它是javax.servlet.Servlet接口的生命周期方法。init方法的语法如下： 12public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException 调用service方法 每当接收到servlet的请求时，Web容器都会调用service方法。如果servlet未初始化，则遵循上述前三个步骤，然后调用service方法。 如果servlet被初始化，它调用service方法。 请注意，servlet仅初始化一次。 Servlet接口的service方法的语法如下： 调用destroy方法 从服务中删除servlet实例之前，Web容器调用destroy方法。它使servlet有机会清理所有资源，例如内存，线程等。Servlet接口的destroy方法的语法如下： 1public void destroy()]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>生命周期</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet HttpSessionEvent统计在线用户数实例]]></title>
    <url>%2F2018%2F07%2F13%2FServlet%20HttpSessionEvent%E7%BB%9F%E8%AE%A1%E5%9C%A8%E7%BA%BF%E7%94%A8%E6%88%B7%E6%95%B0%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 会话对象更改时通知HttpSessionEvent，此事件的相应侦听器接口是HttpSessionListener。 我们可以在这个事件上执行一些操作，例如：计数统计当前登录的用户，记录登录时间，注销时间等用户详细信息。 Servlet HttpSessionEvent统计在线用户数实例HttpSessionListener接口的方法 在HttpSessionListener接口中声明了两种方法，这些方法必须由servlet程序员来实现，以执行某些操作。 public void sessionCreated(HttpSessionEvent e)：在创建会话对象时被调用。 public void sessionDestroyed(ServletContextEvent e)：当会话无效时被调用。 HttpSessionEvent和HttpSessionListener统计当前登录用户数的示例在这个例子中，实现对当前登录的用户进行统计。主要创建了以下几个代码文件： index.html：从用户处获取输入。 MyListener.java：一个侦听器类，用于计算当前登录的用户数量，并将此信息作为属性存储在ServletContext对象中。 First.java：一个创建会话并打印登录用户数量的Servlet类。 Logout.java：一个使会话无效的Servlet类。 打开Eclipse，创建一个动态Web项目：HttpSessionServlet ，其完整的目录结构如下所示 - 文件：index.html - 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;统计在线用户数量&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div style="font-align: center;"&gt; &lt;form action="first" method="post"&gt; 用户名:&lt;input type="text" name="username" value="admin"&gt; 密码:&lt;input type="password" name="password"&gt; &lt;input type="submit" value="登录"&gt; &lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 监听器文件：CountUserListener.java - 123456789101112131415161718192021222324252627282930313233343536373839404142package com.xq.Listener;import javax.servlet.ServletContext;import javax.servlet.annotation.WebListener;import javax.servlet.http.HttpSessionEvent;import javax.servlet.http.HttpSessionListener;/** * Application Lifecycle Listener implementation class CountUserListener * */@WebListenerpublic class CountUserListener implements HttpSessionListener &#123; ServletContext sc = null; static int total =0,current=0; /** * Default constructor. */ public CountUserListener() &#123; &#125; /** * @see HttpSessionListener#sessionCreated(HttpSessionEvent) */ public void sessionCreated(HttpSessionEvent event) &#123; total++; current++; sc = event.getSession().getServletContext(); sc.setAttribute("totalUsers", total); sc.setAttribute("currentUsers", current); &#125; /** * @see HttpSessionListener#sessionDestroyed(HttpSessionEvent) */ public void sessionDestroyed(HttpSessionEvent arg0) &#123; current--; sc.setAttribute("currentUsers", current); &#125; &#125; 文件：First.java - 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485package com.xq.Listener;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletContext;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;/** * Servlet implementation class First */@WebServlet("/First")public class First extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public First() &#123; super(); // TODO Auto-generated constructor stub &#125; //显示用户数 protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); ServletContext sc = getServletContext(); int t = (Integer)sc.getAttribute("totalUsers"); int c = (Integer)sc.getAttribute("currentUsers"); out.print("&lt;br&gt; 用户总数"+t); out.print("&lt;br&gt; 当前用户"+c); out.print("&lt;br&gt;&lt;a href='logout'&gt;注销&lt;/a&gt;"); out.close(); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ //用户登录 protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setCharacterEncoding("UTF-8"); response.setContentType("text/html;charset=UTF-8"); request.setCharacterEncoding("UTF-8"); PrintWriter out = response.getWriter(); String n = request.getParameter("username"); String password = request.getParameter("password"); // 假设输入密码为：123456时，此用户登录成功 if (password == null) &#123; password = ""; &#125; if (password.equals("123456")) &#123; out.print("您好, " + n); HttpSession session = request.getSession(); session.setAttribute("uname", n); ServletContext ctx = getServletContext(); int t = (Integer) ctx.getAttribute("totalUsers"); int c = (Integer) ctx.getAttribute("currentUsers"); out.print("&lt;br&gt;用户总数： " + t); out.print("&lt;br&gt;当前用户数： " + c); out.print("&lt;br&gt;&lt;a href='logout'&gt;注销&lt;/a&gt;"); &#125; else &#123; out.print("登陆失败 ~"); &#125;// // retrieving data from ServletContext object// ServletContext ctx = getServletContext();// int t = (Integer) ctx.getAttribute("totalUsers");// int c = (Integer) ctx.getAttribute("currentUsers");// out.print("&lt;br&gt;用户总数： " + t);// out.print("&lt;br&gt;当前用户数： " + c);// out.print("&lt;br&gt;&lt;a href='logout'&gt;注销&lt;/a&gt;"); out.close(); &#125;&#125; 文件：LogoutServlet.java - 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.xq.Listener;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;/** * Servlet implementation class LogoutServlet */@WebServlet("/LogoutServlet")public class LogoutServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public LogoutServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setContentType("text/html"); PrintWriter out = response.getWriter(); HttpSession session = request.getSession(false); session.invalidate();// invalidating session out.print("You are successfully logged out"); out.close(); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; 文件：web.xml - 12345678910111213141516171819202122232425262728&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app &gt; &lt;display-name&gt;HttpSessionServlet&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;servlet-name&gt;FirstServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.Listener.First&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;FirstServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/first&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;LogoutServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.xq.Listener.LogoutServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;LogoutServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/logout&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 在编写上面代码后，部署此Web应用程序(在项目名称上点击右键-&gt;”Run On Server…”)，打开浏览器访问URL： http://localhost:8080/HttpSessionServlet/ ，如果没有错误，应该会看到以下结果 - 登录成功之后 - 打开另一个浏览器访问URL： http://localhost:8080/HttpSessionServlet/ ，登录应用，然后注销，再次访问： http://localhost:8080/HttpSessionServlet/first ，应该看到以下结果 -]]></content>
      <categories>
        <category>Servlet</category>
      </categories>
      <tags>
        <tag>在线人数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac连接使用JDBC]]></title>
    <url>%2F2018%2F07%2F11%2FMac%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[Mac连接数据库1.安装好mysql和java，安装成功后打开系统偏好设置，下面会看到，mysql安装成功后打开命令行，输入mysql.server start即可打开数据库。 2.下载mysql的jar包，然后在工程里引入jar包，右键单击工程，buildPath—&gt;Configure BuildPath，选择右上角的Libraries。 . 3.数据包准备(下Navicat,网盘,提取密码:x6b6) ​ 3.1 在数据库test中创建Part表 123456789CREATE TABLE `Part` ( `partkey` int(11) NOT NULL, `name` varchar(55) COLLATE gbk_bin DEFAULT NULL, `mfgr` char(25) COLLATE gbk_bin DEFAULT NULL, `type` varchar(25) COLLATE gbk_bin DEFAULT NULL, `size` int(11) DEFAULT NULL, `retailprice` double DEFAULT NULL, PRIMARY KEY (`partkey`)) ​ 3.2 添加如下数据 partkey Name mfgr type size retailprice 1 螺旋桨 浙大 散 10 1000 2 推进器 海大 整 20 2000 3 船舶模拟驾驶舱 海大 整 30 4000 4 南航 航天 散 20 2000 5 螺旋剑 浙大 散 10 1000 6 推进器 海大 整 20 2000 4. JDBC的开发步骤 引入JDBC驱动器jar包 在程序中引入JDBC驱动器类 创建java程序跟数据库的连接 跟数据库交互:发送sql语句，接收数据库对sql语句的执行结果 解析执行结果 连接并读取数据库 数据库名称:test 数据包名称:Part 端口号:3306 用户名:root 密码:root 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import com.mysql.jdbc.Connection;import com.mysql.jdbc.Statement;public class Test6 &#123; static &#123; try &#123; Class.forName("com.mysql.jdbc.Driver"); &#125; catch (ClassNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; public static Connection getConnection() throws SQLException &#123; return (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/test?useSSL=false&amp;user=root&amp;password=XQ3720xq&amp;useUnicode=true&amp;characterEncoding=utf-8"); &#125; public static void free(Connection conn,Statement st,ResultSet rs) &#123; if(rs != null) &#123; try &#123; rs.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125;finally &#123; if(st != null) &#123; try &#123; st.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125;finally &#123; if(conn != null) &#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; &#125; &#125; &#125; &#125;&#125; 5 增、删、改、查。（注意释放资源） 增加数据 12345678910111213141516171819//批量增加sql语句 public void insertBatch() throws SQLException &#123; Connection conn = Test6.getConnection(); conn.setAutoCommit(false);//禁止提交 String sql = "insert into Part values (?,?,?,?,?,?)"; PreparedStatement ps = (PreparedStatement)conn.prepareStatement(sql); for(int i=7;i&lt;=8;i++) &#123; ps.setInt(1,i); ps.setString(2, "船舶模拟驾驶舱"+i); ps.setString(3, "海大"+i); ps.setString(4, "整"+i); ps.setInt(5, 40); ps.setDouble(6, 3000.0); ps.addBatch(); &#125; ps.executeBatch(); conn.commit();//提交 Test6.free(conn, ps, null); &#125; ​ 运行结果: 删除数据 1234567891011121314//批量删除sql语句 public void deleteBatch() throws SQLException &#123; Connection conn = Test6.getConnection(); conn.setAutoCommit(false); String sql = "delete from Part where partkey = ?"; PreparedStatement ps = (PreparedStatement)conn.prepareStatement(sql); for(int i=7;i&lt;=9;i++) &#123; ps.setInt(1, i); ps.addBatch(); &#125; ps.executeBatch(); conn.commit(); Test6.free(conn, ps, null); &#125; ​ 运行结果: 修改数据 12345678910111213141516//批量修改sql语句 public void updateBatch() throws SQLException &#123; Connection conn = Test6.getConnection(); conn.setAutoCommit(false); String sql = "update Part set name =?where partkey=?"; PreparedStatement ps = (PreparedStatement)conn.prepareStatement(sql); for(int i=1;i&lt;=6;i++) &#123; ps.setString(1, "航天"+i); ps.setInt(2, i); ps.addBatch(); &#125; ps.executeBatch(); conn.commit(); Test6.free(conn, ps, null); &#125; ​ 运行结果: 查找数据 12345678910//查询sql语句 public void queryAll(String sql) throws SQLException &#123; Connection conn = Test6.getConnection(); Statement st = (Statement)conn.createStatement(); ResultSet rs = st.executeQuery(sql); while(rs.next()) &#123; System.out.println(rs.getString("name")); &#125; Test6.free(conn, st, rs); &#125; ​ 运行结果:]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA-HTML&CSS]]></title>
    <url>%2F2018%2F07%2F08%2FHTML%E5%92%8CCSS%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 一、HTML语言基本介绍1.基本结构&lt;html&gt;&lt;!--根标签--&gt; &lt;head&gt;&lt;!--网页头部（用于设计网页属性--&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;!--定义文本信息--&gt; &lt;title&gt;哈哈哈 &lt;!--网页的名字--&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 小琦 &lt;!--主题部分(编辑区网页显示的内容部分)--&gt; &lt;/body&gt; &lt;/html&gt; 2.网页的基本标签元素 Tag Meaning &lt;h1&gt;&lt;/h1&gt; 标题标签 &lt;p&gt;&lt;/p&gt; 段落标签 &lt;em&gt;&lt;/em&gt; 斜体标签 &lt;br/&gt; 换行标签 &lt;hr/&gt; 水平线标签 &lt;strong&gt;&lt;/strong&gt; 加粗标签 &lt;blockquote&gt;&lt;/blockquote&gt; 段落缩进 &lt;font&gt;&lt;/font&gt; 字体标签(color、size、face) &lt;center&gt;&lt;/center&gt; 居中标签 &lt;sup&gt;&lt;/sup&gt; 上标 &lt;sub&gt;&lt;/sub&gt; 下标 &lt;pre&gt;&lt;pre&gt; 原样输出 3.注释和特殊符号 特殊符号 注释 &amp;nbsp; 空格(space) &amp;gt; 大于号(&gt;) &amp;lt; 小于号(&lt;) &amp;copy; 版权所有(©️) &amp;reg; 注册商标(®️) 4.超链接1)在同一页面下: (1)打锚点:&lt;a name=&quot;锚点名称&quot;&gt;&lt;/a&gt; (2)创建跳转链接:&lt;a href=&quot;锚点名称&quot;&gt;开始跳转&lt;/a&gt; 2)在不同的页面下: (1)打锚点:&lt;a name=&quot;锚点名称&quot;&gt;开始跳转&lt;/a&gt; (2)创建 跳转链接:&lt;a href=&quot;资源文件或者资源地址#锚点名称&quot;&gt;开始跳转&lt;/a&gt; 5.图片标签&lt;img src=&quot;图片路径&quot; alt=&quot;图片替代文本&quot; title=&quot;鼠标悬浮文字&quot; width=&quot;图片宽度&quot; height=&quot;图片高度&quot;/&gt; 6.列表标签无序号: &lt;ul type=&quot;circle&quot;&gt; &lt;li&gt;小琦&lt;/li&gt; &lt;li&gt;小猪&lt;/li&gt; &lt;/ul&gt; 有序号: &lt;ol type=&quot;circle&quot;&gt; &lt;li&gt;小琦&lt;/li&gt; &lt;li&gt;小猪&lt;/li&gt; &lt;/ol&gt; 7.块标签和行内标签&lt;div&gt;块标签&lt;/div&gt; &lt;span&gt;行标签&lt;/span&gt; 8.表格标签border || align || width || height 9.表单标签&lt;form action = &quot;#&quot; method = &quot;get/post&quot;&gt;&lt;/form&gt; form标签属性:1) action:整个表单提交的位置(可以使一个页面，也可以是JAVA代码) 2) method:表单提交的方式(get/post/delete…) post&lt;ul type=&quot;circle&quot;&gt; &lt;li&gt;不会将信息展示到地址栏&lt;/li&gt; &lt;li&gt;提交文件大小无限制&lt;/li&gt; &lt;/ul&gt; get&lt;ul type=&quot;circle&quot;&gt; &lt;li&gt;将用户信息展示到地址栏&lt;/li&gt; &lt;li&gt;提交文件大小无限制&lt;/li&gt; &lt;/ul&gt; 二、CSS介绍 1.CSS指层叠样式表。 2.样式定义如何显示HTML元素。 3.样式通常存储在样式表中。 4.把样式添加到HTML4.0中是为了解决内容与表现分离问题。 5.外部样式表可以极大的提高工作效率。 6.外部样式表通常存储在CSS文件中。 7.多个样式表可以层叠。 10.CSS的三种引入方式 第一种:行内引入 &lt;div style=&quot;color: red; font-size: 100px;&quot;&gt;程序猿&lt;/div&gt; 第二种:内部引入 &lt;style type=&quot;text/css&quot;&gt; .box{ color:red; font-size: 100px; } &lt;/style&gt; &lt;div class=&quot;box&quot;&gt;程序猿&lt;/div&gt; 第三种:外部引入 &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; herf=&quot;../css/style.css&quot;&gt; 11.CSS选择器CSS选择器有三种(元素选择器、类选择器、id选择器) 元素选择器 元素名{ 属性名：属性值; } id选择器 #id属性名{ 属性名：属性值; } 类选择器 .类选择器{ 属性名：属性值; } 12.CSS常用的属性(1)CSS文本 color: line-height: letter-spacing: text-align: word-spacing: (2)CSS字体 font-family:字体系列(类型) font-size:字体尺寸 font-style:字体的样式 normal:标准的字体样式 italic:斜体 font-wight:设置字体的粗细 CSS字体的简写属性: font:italic bold 36px &quot;黑体&quot; ; (3)CSS列表 list-style-type:设置列表项前面的类型 list-style-image：常用的属性值:URL 图像的路径 (4)CSS背景 background-image: background-repeat: background-position: background-color: (5)CSS表格 border-collapse :collapse; 合并边框 (6)CSS边框 border-style（上、右、下、左） border-width（上、右、下、左） border-color（上、右、下、左） 13.CSS让块元素成为内联元素display: inline-block 14.div居中margin: 0 auto; 15.块元素内容居中text-align: center;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git-命令小结]]></title>
    <url>%2F2017%2F10%2F10%2FGit-%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[数据来源于网络，仅供平时查询使用 一、新建代码库// 在当前目录新建一个 Git 代码库 git init // 新建一个目录，将其初始化为 Git 代码库 git init [project-name] // 下载一个项目 git clone [project-url] 二、基础配置// 显示当前所有的 Git 配置 git config --list // 编辑 Git 配置文件 git config -e [--global] // 设置提交代码时的用户信息 git config [--global] user.name &quot;[name]&quot; git config [--global] user.email &quot;[email]&quot; 三、增加/删除文件// 添加文件到暂存区 git add [file] [file1] ... // 添加指定目录到暂存区，包括子目录 git add [dir] // 添加当前目录的所有文件到暂存区 git add . // 添加每个变化钱，都会要求确认 // 对于同一个文件的多出变化，可以实现分次提交 git add -p // 删除工作区文件，并且将这次删除放入暂存区 git rm [file1] [file2] ... // 停止追踪指定文件，但该文件会保留在工作区 git rm --cached [file] // 改名文件，并且将这个改名放入暂存区 git mv [file-original] [file-renamed] 四、代码提交// 提交暂存区到仓库区 git commit -m &quot;[message]&quot; // 提交暂存区指定的文件到仓库区 git commit [file1] [file2] ... -m [message] // 提交工作区自上次 commit 之后的变化，直接到仓库区 git commit -a // 提交时显示所有 diff 信息 git commit -b // 使用一次新的 commit，替代上一次提交 git commit --amend -m &quot;[message]&quot; // 重新上一次的 commit，并包括之id那个文件的新变化 git commit --amend [file1] [file2] ... 五、分支// 列出所有本地的分支 git branch // 列出所有远程的分支 git branch -r // 列出所有本地分支和远程分支 git branch -a // 新建一个分支，但依然停留在当前的分支 git branch [branch_name] // 新建一个分支，并且切换到该分支 git checkout -b [branch_name] // 新建一个分支，指向指定的 commit git branch [branch_name] [commit] // 新建一个分支，与指定的远程分支建立追踪关系 git branch --track [branch_name] [remote_branch] // 切换到指定的分支，并更新工作区 git checkout [branch_name] // 切换到上一个分支 git checkout - // 建立追踪关系，在现有分支与指定的远程分支之间 git branch --set-upstream [branch_name] [remote_branch] // 合并指定分支到当前分支 git merge [branch_name] // 选择一个 commit，合并到当前的分支 git cherry-pick [commit] // 删除分支 git branch -d [branch_name] // 删除远程分支 git push origin --delete [branch_name] git branch -dr [remote/branch_name] 六、标签// 列出所有 tag git tag // 新建一个 tag 在当前的 commit git tag [tag] // 新建一个 tag 在指定的 commit git tab [tag] [commit] // 删除本地 tag git tag -d [tag] // 删除远程 tag git push orgin :refs/tags/[tag] // 查看 tag 信息 git show [tag] // 提交指定 tag 信息 git push [remote] [tag] // 提交所有 tag git push [remote] --tags // 新建一个分支，指向指定某个 tag git checkout -b [branch] [tag] 七、查看信息// 显示所有变更的文件 git status // 显示当前分支的版本历史 git log // 显示 commit 历史，以及每次 commit 发生的变更 git log --stat // 搜索提交历史，根据关键词 git log -S [keyword] // 显示某个 commit 之后所有的变动，每个 commit 占据一行 git log [tag] HEAD --pretty=format:%s // 显示某个文件的版本历史，包括文件名 git log --follow [file] git whatchanged [file] // 显示指定文件相关的每一次 diff git log -p [file] // 显示过去5次提交 git log -5 --pretty --oneline // 显示所有提交过的用户，按提交次数排序 git shortlog -sn // 显示指定文件是什么人在什么时候修改过 git blame [file] // 显示暂存区和工作区的差异 git diff // 显示暂存区和上一个 commit 的差异 git diff --cached [file] // 显示暂存区与当前分支最新 commit 之间的差异 git diff HEAD // 显示两次提交之间的差异 git diff [first_branch]...[second_branch] // 显示今天你写了多少行代码 git diff --shortstat &quot;@{0 day ago}&quot; // 显示某次提交的元数据和内容变化 git show [commit] // 显示某次提交发生变化的文件 git show --name-only [commit] // 显示某次提交时，某个文件的内容 git show [commit]:[fileName] // 显示当前分支的最近几次提交 git reflog 八、远程同步// 下载远程仓库的所有变动 git fetch [remote] // 显示所有远程仓库 git remote -v // 显示某个远程仓库的信息 git remote show [remote] // 增加一个新的远程仓库，并命名 git remote add [shortName] [url] // 取回远程仓库的变化，并与本地分支合并 git pull [remote] [branch] // 上传本地指定分支到远程仓库 git push [remote] --force // 推送所有分支到远程仓库 git push [remote] --all 九、撤销// 恢复暂存区的指定文件到工作区 git checkout [file] // 恢复某个 commit 的指定文件到暂存区和工作区 git checkout [commit] [file] // 恢复暂存区的所有文件到工作区 git checkout . // 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变 git reset [file] // 重置暂存区和工作区，与上一次的 commit 保持一致 git reset --hard // 重置当iqanefnzhi的指针为指定 commit，同时重置暂存区 git reset [commit] // 重置当前分支的HEAD为指定的 commit，同时重置暂存区和工作区 git reset --hard [commit] // 重置当前HEAD为指定的 commit，但保持暂存区和工作区不变 git rest --keep [commit] // 新建一个 commit，用来撤销指定的 commit // 后者的所有变化都将被前者抵消，并且应用到当前分支 git revert [commit] // 暂时将为提交的变化移除，稍后再移入 git stash git stash pop]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
